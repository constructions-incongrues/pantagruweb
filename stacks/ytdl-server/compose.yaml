volumes:
  # PostgreSQL database files
  database:
  # Broker database files
  broker-data:

services:
  # REST API
  api:
    image: registry.gitlab.com/adralioh/ytdl-server/api:latest
    restart: on-failure
    depends_on:
      - database
      - broker
    environment: &ytdl-environment
      YTDL_DATABASE_URI: postgresql://postgres:password@database/ytdl
      YTDL_CELERY_BROKER_URL: amqp://broker
      # Needed if you're using a worker image that has yt-dlp
      YTDL_MODULE: yt_dlp
      YTDL_LOG_LEVEL: DEBUG
    volumes:
      - ./ytdl-server.yml:/config/ytdl-server.yml:ro
      - ./cookies.txt:/cookies.txt
    labels:
      - traefik.enable=true
      - traefik.http.routers.pantagruweb-ytdl-server.rule= Host(`ytdl.pantagruweb.club`)
      - traefik.http.routers.pantagruweb-ytdl-server.entrypoints=web,websecure
      - traefik.http.services.pantagruweb-ytdl-server.loadbalancer.server.port=8000
      - traefik.docker.network=saltbox
    networks:
      - saltbox
      - default

  # Celery worker
  worker:
    image: registry.gitlab.com/adralioh/ytdl-server/worker:yt_dlp-ffmpeg
    restart: on-failure
    depends_on:
      - database
      - broker
    # Copy the environment from the 'api' service
    environment: *ytdl-environment
    volumes:
      - /mnt/volume-fsn1-1/ytdl-server/videos:/videos
      - /mnt/volume-fsn1-1/ytdl-server/cache:/cache
      - ./cookies.txt:/cookies.txt

  # Database / Celery backend
  database:
    image: postgres:alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: ytdl
    volumes:
      - database:/var/lib/postgresql/data

  # Celery broker.
  # You can also use a different type (such as Redis) as long as it's supported
  # by Celery
  broker:
    image: rabbitmq:alpine
    # Prevent RabbitMQ from creating a new database every time the container is
    # recreated
    hostname: ytdl-broker
    volumes:
      - broker-data:/var/lib/rabbitmq

networks:
  saltbox:
    external: true